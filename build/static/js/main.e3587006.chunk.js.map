{"version":3,"sources":["services/http.js","services/movieServise.js","components/movies/movieContainer.jsx","components/common/pagination.jsx","components/common/header.jsx","components/common/searchBox.jsx","components/common/title.jsx","components/movies/movies.jsx","services/tvShowServise.js","components/tvShows/tvShows.jsx","App.js","registerServiceWorker.js","index.js"],"names":["axios","interceptors","response","use","error","expectedError","status","console","log","Promise","reject","get","post","put","delete","baseUrl","process","apiKey","getMovies","serch","page","http","getPopularMovies","MovieContainer","data","className","style","padding","src","poster_path","title","overview","totalPages","Array","total_pages","keys","filter","x","Paginateion","handlePageChange","length","previousLabel","previousLinkClassName","nextLinkClassName","nextLabel","breakLabel","breakClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeLinkClassName","pageLinkClassName","Header","border","to","href","SearchBox","onSearch","onSearchSubmit","height","onKeyDown","type","placeholder","onChange","aria-label","Title","text","Movie","state","search","curentPages","curentPage","getData","e","a","key","setState","results","charAt","toUpperCase","slice","handleSearch","target","value","selected","this","map","id","Component","getTvShows","getPopularTvShows","TvShow","App","Fragment","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e3587006.chunk.js","sourcesContent":["import axios from 'axios'\n\naxios.interceptors.response.use(null, error => {\n    const expectedError =\n        error.response &&\n        error.response.status >= 400 &&\n        error.response.status < 500;\n\n    if (!expectedError) {\n        console.log(expectedError)\n    }\n\n    return Promise.reject(error);\n});\n\nexport default {\n    get: axios.get,\n    post: axios.post,\n    put: axios.put,\n    delete: axios.delete\n};\n","import http from './http'\nconst baseUrl = process.env.REACT_APP_BASE_URL\nconst apiKey = process.env.REACT_APP_API_KEY\n\n\nexport function getMovies(serch, page) {\n    return http.get(`${baseUrl}3/search/movie?api_key=${apiKey}&query=${serch}&language=en-US&&page=${page}&include_adult=false`)\n}\nexport function getPopularMovies(page) {\n    return http.get(`${baseUrl}3/movie/popular?api_key=${apiKey}&language=en-US&&page=${page}`)\n}","import React from \"react\";\n\nconst MovieContainer = ({ data }) => {\n  return (\n    <div\n      className=\" container-size card mb-3 col-5 m-3 mx-auto\"\n      style={{ padding: 0 }}\n    >\n      <div className=\"row no-gutters\">\n        <div className=\"col-md-5\">\n          <img\n            src={`https://image.tmdb.org/t/p/w400${data.poster_path}`}\n            className=\"card-img image-fit\"\n          />\n        </div>\n        <div className=\"col-md-7\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">{data.title}</h5>\n            <p className=\"card-text d-inline-block  multiline-ellipsis\">\n              {data.overview}\n            </p>\n            <p className=\"card-text\">\n              <small className=\"text-muted\">Last updated 3 mins ago</small>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieContainer;\n","import React from \"react\";\r\nimport ReactPaginate from \"react-paginate\";\r\n\r\nexport const totalPages = data => {\r\n  return [...Array(data.data.total_pages).keys()].filter(x => x !== 0);\r\n};\r\nconst Paginateion = ({ totalPages, handlePageChange }) => {\r\n  return (\r\n    <div>\r\n      {totalPages.length > 1 ? (\r\n        <ReactPaginate\r\n          previousLabel={\"<-- prev\"}\r\n          previousLinkClassName={\"previous-pagination-butto\"}\r\n          nextLinkClassName={\"next-pagination-butto\"}\r\n          nextLabel={\"next -->\"}\r\n          breakLabel={\"...\"}\r\n          breakClassName={\"break-me\"}\r\n          pageCount={totalPages.length - 1}\r\n          marginPagesDisplayed={2}\r\n          pageRangeDisplayed={4}\r\n          onPageChange={handlePageChange}\r\n          containerClassName={\"pagination\"}\r\n          subContainerClassName={\"pages pagination\"}\r\n          activeLinkClassName={\"active-page-paginate\"}\r\n          pageLinkClassName={\"each-page-paginate\"}\r\n        />\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Paginateion;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <table className=\"col-12 table header\">\r\n            <tbody>\r\n              <tr>\r\n                <th style={{ border: \"none\" }}>\r\n                  <Link to=\"/\">\r\n                    <img src=\"Thmdb.png\" className=\"logo-img\" />\r\n                  </Link>\r\n                </th>\r\n                <th style={{ border: \"none\" }}>\r\n                  <h2 className=\"logo\">The Movies You Missed</h2>\r\n                  <h6 className=\"logo\"></h6>\r\n                  <a className=\"navbar-btn\" href=\"/movie\">\r\n                    Movies\r\n                  </a>\r\n                  <a className=\"navbar-btn\" href=\"/tv\">\r\n                    Tv Show\r\n                  </a>\r\n                  <a className=\"navbar-btn\" href=\"/movie\">\r\n                    People\r\n                  </a>\r\n                </th>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ onSearch, onSearchSubmit }) => {\r\n  return (\r\n    <div className=\"search-box\" style={{ height: \"40px\" }}>\r\n      <div className=\"container md-form mb-3 mt-0 \">\r\n        <input\r\n          onKeyDown={onSearchSubmit}\r\n          className=\"search-box\"\r\n          type=\"text\"\r\n          placeholder=\"Search for a movie, tv show or a person...\"\r\n          onChange={onSearch}\r\n          aria-label=\"Search\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Title = ({ text }) => {\r\n  return <h3 style={{'margin': \"20px\"}}>{text}</h3>;\r\n};\r\n\r\nexport default Title;\r\n","import React, { Component } from \"react\";\nimport { getMovies, getPopularMovies } from \"../../services/movieServise\";\nimport MovieContainer from \"./movieContainer\";\nimport Paginateion from \"../common/pagination\";\nimport Header from \"../common/header\";\nimport SearchBox from \"../common/searchBox\";\nimport Title from \"../common/title\";\nimport { totalPages } from \"../common/pagination\";\n\nclass Movie extends Component {\n  state = {\n    search: \"\",\n    data: [],\n    totalPages: [],\n    curentPages: \"\",\n    curentPage: 1,\n    title: \"Popular Movies\"\n  };\n\n  // get populat movies\n  async componentDidMount() {\n    const data = await getPopularMovies(this.state.curentPage);\n\n    this.setState({ data: data.data.results });\n    this.setState({ curentPage: data.data.page });\n    this.setState({\n      totalPages: totalPages(data)\n    });\n  }\n  // search\n  getData = async e => {\n    if (e.key === \"Enter\" && this.state.search !== \"\") {\n      const data = await getMovies(this.state.search, 1);\n\n      this.setState({ data: data.data.results });\n      this.setState({ curentPage: data.data.page });\n      this.setState({\n        totalPages: totalPages(data)\n      });\n      this.setState({\n        title: `Search > ${this.state.search.charAt(0).toUpperCase() +\n          this.state.search.slice(1)}`\n      });\n    }\n  };\n\n  handleSearch = e => {\n    this.setState({ search: e.target.value });\n  };\n  // move this to paginate\n  handlePageChange = async data => {\n    const selected = data.selected + 1;\n\n    if (this.state.search === \"\") {\n      this.setState({ curentPage: selected });\n      const data = await getPopularMovies(selected);\n      this.setState({ data: data.data.results });\n    }\n    if (this.state.search !== \"\") {\n      const data = await getMovies(this.state.search, selected);\n      this.setState({ data: data.data.results });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <SearchBox onSearch={this.handleSearch} onSearchSubmit={this.getData} />\n        <div className=\"container\">\n          <div className=\"container \">\n            <Title text={this.state.title} />\n            <div className=\"row\">\n              {this.state.data.map(data => (\n                <MovieContainer key={data.id} data={data} />\n              ))}\n            </div>\n          </div>\n\n          <Paginateion\n            totalPages={this.state.totalPages}\n            search={this.state.search}\n            handlePageChange={this.handlePageChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Movie;\n","import http from './http'\r\n\r\nconst baseUrl = process.env.REACT_APP_BASE_URL\r\nconst apiKey = process.env.REACT_APP_API_KEY\r\n\r\n\r\nexport function getTvShows(serch, page) {\r\n    return http.get(`${baseUrl}3/search/tv?api_key=${apiKey}&query=${serch}&language=en-US&&page=${page}&include_adult=false`)\r\n}\r\nexport function getPopularTvShows(page) {\r\n    return http.get(`${baseUrl}3/tv/popular?api_key=${apiKey}&language=en-US&&page=${page}`)\r\n}","import React, { Component } from \"react\";\r\nimport { getTvShows, getPopularTvShows } from \"../../services/tvShowServise\";\r\nimport MovieContainer from \"../movies/movieContainer\";\r\nimport Paginateion from \"../common/pagination\";\r\nimport Header from \"../common/header\";\r\nimport SearchBox from \"../common/searchBox\";\r\nimport Title from \"../common/title\";\r\nimport { totalPages } from \"../common/pagination\";\r\n\r\nclass TvShow extends Component {\r\n  state = {\r\n    search: \"\",\r\n    data: [],\r\n    totalPages: [],\r\n    curentPages: \"\",\r\n    curentPage: 1,\r\n    title: \"Popular TV Shows\"\r\n  };\r\n\r\n  // get populat movies\r\n  async componentDidMount() {\r\n    const data = await getPopularTvShows(this.state.curentPage);\r\n\r\n    this.setState({ data: data.data.results });\r\n    this.setState({ curentPage: data.data.page });\r\n    this.setState({\r\n      totalPages: totalPages(data)\r\n    });\r\n  }\r\n  // search\r\n  getData = async e => {\r\n    if (e.key === \"Enter\" && this.state.search !== \"\") {\r\n      const data = await getTvShows(this.state.search, 1);\r\n\r\n      this.setState({ data: data.data.results });\r\n      this.setState({ curentPage: data.data.page });\r\n      this.setState({\r\n        totalPages: totalPages(data)\r\n      });\r\n      this.setState({\r\n        title: `Search > ${this.state.search.charAt(0).toUpperCase() +\r\n          this.state.search.slice(1)}`\r\n      });\r\n    }\r\n  };\r\n\r\n  handleSearch = e => {\r\n    this.setState({ search: e.target.value });\r\n  };\r\n\r\n  handlePageChange = async data => {\r\n    const selected = data.selected + 1;\r\n\r\n    if (this.state.search === \"\") {\r\n      this.setState({ curentPage: selected });\r\n      const data = await getPopularTvShows(selected);\r\n      this.setState({ data: data.data.results });\r\n    }\r\n    if (this.state.search !== \"\") {\r\n      const data = await getTvShows(this.state.search, selected);\r\n      this.setState({ data: data.data.results });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <SearchBox onSearch={this.handleSearch} onSearchSubmit={this.getData} />\r\n        <div className=\"container\">\r\n          <Title text={this.state.title} />\r\n          <div className=\"container \">\r\n            <div className=\"row\">\r\n              {this.state.data.map(data => (\r\n                <MovieContainer key={data.id} data={data} />\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <Paginateion\r\n            totalPages={this.state.totalPages}\r\n            search={this.state.search}\r\n            handlePageChange={this.handlePageChange}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TvShow;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Movie from \"./components/movies/movies\";\nimport TvShow from \"./components/tvShows/tvShows\";\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        \n        {/* <ToastContainer /> */}\n        {/* <NavBar /> */}\n\n        {/* <main className=\"container\"> */}\n        <Switch>\n          <Route path=\"/movie\" component={Movie} /> */}\n          <Route path=\"/tv\" component={TvShow} /> */}\n          <Redirect to=\"/not-found\" />\n          {/* <Route path=\"/register\" component={RegisterForm} />\n            \n            <Route path=\"/not-found\" component={NotFound} /> */}\n        </Switch>\n        {/* </main> */}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\n            );\n          });\n        } else {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\n\n\nReactDOM.render(\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n  );\n  registerServiceWorker();"],"sourceRoot":""}